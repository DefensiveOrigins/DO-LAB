{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "utcValue": {
      "type": "string",
      "metadata": {
        "description": "Returns the current (UTC) datetime value in the specified format. If no format is provided, the ISO 8601 (yyyyMMddTHHmmssZ) format is used"
      },
      "defaultValue": "[utcNow()]"
    },
    "workspaceName": {
      "type": "string",
      "metadata": {
        "description": "Name for the Log Analytics workspace used to aggregate data"
      }
    },
    "pricingTier": {
      "type": "string",
      "metadata": {
        "description": "Pricing tier: pergb2018 or legacy tiers (Free, Standalone, PerNode, Standard or Premium) which are not available to all customers."
      },
      "allowedValues": [
        "PerGB2018",
        "Free",
        "Standalone",
        "PerNode",
        "Standard",
        "Premium"
      ],
      "defaultValue": "PerGB2018"
    },
    "dataRetention": {
      "type": "int",
      "minValue": 7,
      "maxValue": 730,
      "metadata": {
        "description": "Number of days of retention. Workspaces in the legacy Free pricing tier can only have 7 days."
      },
      "defaultValue": 30
    },
    "immediatePurgeDataOn30Days": {
      "type": "bool",
      "metadata": {
        "description": "If set to true when changing retention to 30 days, older data will be immediately deleted. Use this with extreme caution. This only applies when retention is being set to 30 days."
      },
      "defaultValue": true
    },
    "securityCollectionTier": {
      "type": "string",
      "defaultValue": "Minimal",
      "allowedValues": [
        "All",
        "Recommended",
        "Minimal",
        "None"
      ],
      "metadata": {
        "description": "Tier for gathering Windows Security Events."
      }
    },
    "location": {
      "type": "string",
      "metadata": {
        "description": "Location for all resources."
      },
      "defaultValue": "[resourceGroup().location]"
    }
  },
  "variables": {
    "uniqueWorkspace": "[concat(parameters('workspaceName'), uniquestring(resourceGroup().id, parameters('utcValue')))]"
  },
  "resources": [
    {
      "name": "[variables('uniqueWorkspace')]",
      "type": "Microsoft.OperationalInsights/workspaces",
      "apiVersion": "2020-08-01",
      "location": "[parameters('location')]",
      "properties": {
        "retentionInDays": "[parameters('dataRetention')]",
        "features": {
          "immediatePurgeDataOn30Days": "[parameters('immediatePurgeDataOn30Days')]"
        },
        "sku": {
          "name": "[parameters('pricingTier')]"
        }
      }
    },
    {
      "name": "[concat(variables('uniqueWorkspace'),'/Microsoft.SecurityInsights/default')]",
      "type": "Microsoft.OperationalInsights/workspaces/providers/onboardingStates",
      "apiVersion": "2021-03-01-preview",
      "properties": {
      },
      "dependsOn": [
        "[resourceId('Microsoft.OperationalInsights/workspaces', variables('uniqueWorkspace'))]"
      ]
    },
    {
      "name": "[concat('SecurityInsights','(', variables('uniqueWorkspace'),')')]",
      "type": "Microsoft.OperationsManagement/solutions",
      "apiVersion": "2015-11-01-preview",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[resourceId('Microsoft.OperationalInsights/workspaces/', variables('uniqueWorkspace'))]"
      ],
      "properties": {
        "workspaceResourceId": "[resourceId('Microsoft.OperationalInsights/workspaces', variables('uniqueWorkspace'))]"
      },
      "plan": {
        "name": "[concat('SecurityInsights','(', variables('uniqueWorkspace'),')')]",
        "product": "OMSGallery/SecurityInsights",
        "publisher": "Microsoft",
        "promotionCode": ""
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/savedSearches",
      "apiVersion": "2020-08-01",
      "name": "[concat(variables('uniqueWorkspace'), '/SysmonParser')]",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[resourceId('Microsoft.OperationalInsights/workspaces/', variables('uniqueWorkspace'))]"
      ],
      "properties": {
        "etag": "*",
        "displayName": "SysmonParser",
        "category": "Sysmon",
        "FunctionAlias": "SysmonParser",
        "query": "let timeframe = \"{time_range}\"; \nlet EventData = Event \n| where Source == \"Microsoft-Windows-Sysmon\" \n| extend RenderedDescription = tostring(split(RenderedDescription, \":\")[0]) \n| project TimeGenerated, Source, EventID, Computer, UserName, EventData, RenderedDescription \n| extend EvData = parse_xml(EventData) \n| extend EventDetail = EvData.DataItem.EventData.Data \n| project-away EventData, EvData; \nlet SysmonEvent1_ProcessCreate=() { \nlet processEvents = EventData \n| where EventID == 1 \n| extend rule_name = EventDetail.[0].[\"#text\"], event_creation_time = EventDetail.[1].[\"#text\"], process_guid = EventDetail.[2].[\"#text\"], process_id = EventDetail.[3].[\"#text\"], process_path = EventDetail.[4].[\"#text\"],  \nfile_version = EventDetail.[5].[\"#text\"], file_description = EventDetail.[6].[\"#text\"], file_product = EventDetail.[7].[\"#text\"], file_company = EventDetail.[8].[\"#text\"], file_name = EventDetail.[9].[\"#text\"],  \nprocess_command_line = EventDetail.[10].[\"#text\"], file_directory = EventDetail.[11].[\"#text\"], user_name = EventDetail.[12].[\"#text\"], user_logon_guid = EventDetail.[13].[\"#text\"],  \nuser_logon_id = EventDetail.[14].[\"#text\"], user_session_id = EventDetail.[15].[\"#text\"], process_integrity_level = EventDetail.[16].[\"#text\"], Hashes = EventDetail.[17].[\"#text\"],  \nprocess_parent_guid = EventDetail.[18].[\"#text\"], process_parent_id = EventDetail.[19].[\"#text\"], process_parent_path = EventDetail.[20].[\"#text\"], process_parent_command_line = EventDetail.[21].[\"#text\"] \n| parse rule_name with * 'technique_id=' technique_id ',' * 'technique_name=' technique_name ',' * 'phase_name=' phase_name \n| parse Hashes with * 'SHA1=' hash_sha1 ',' * 'MD5=' hash_md5 ',' * 'SHA256=' hash_sha256 ',' * 'IMPHASH=' hash_imphash \n| project-away EventDetail, rule_name, Hashes \n; \nprocessEvents; \n}; \nlet SysmonEvent2_FileCreateTime=() { \nlet processEvents = EventData \n| where EventID == 2 \n| extend rule_name = EventDetail.[0].[\"#text\"], event_creation_time = EventDetail.[1].[\"#text\"], process_guid = EventDetail.[2].[\"#text\"], process_id = EventDetail.[3].[\"#text\"], process_path = EventDetail.[4].[\"#text\"], \nfile_path = EventDetail.[5].[\"#text\"], file_creation_time = EventDetail.[6].[\"#text\"], file_previous_creation_time = EventDetail.[7].[\"#text\"] \n| parse rule_name with * 'technique_id=' technique_id ',' * 'technique_name=' technique_name ',' * 'phase_name=' phase_name \n| parse Hashes with * 'SHA1=' hash_sha1 ',' * 'MD5=' hash_md5 ',' * 'SHA256=' hash_sha256 ',' * 'IMPHASH=' hash_imphash \n| project-away EventDetail, rule_name, Hashes \n; \nprocessEvents; \n}; \nlet SysmonEvent3_NetworkConnect=() { \nlet processEvents = EventData \n| where EventID == 3 \n| extend rule_name = EventDetail.[0].[\"#text\"], event_creation_time = EventDetail.[1].[\"#text\"], process_guid = EventDetail.[2].[\"#text\"], process_id = EventDetail.[3].[\"#text\"], process_path = EventDetail.[4].[\"#text\"], \nuser_name = EventDetail.[5].[\"#text\"], network_protocol = EventDetail.[6].[\"#text\"], network_connection_initiated = EventDetail.[7].[\"#text\"], src_is_ipv6 = EventDetail.[8].[\"#text\"], src_ip = EventDetail.[9].[\"#text\"],  \nsrc_host_name = EventDetail.[10].[\"#text\"], src_port = EventDetail.[11].[\"#text\"], src_port_name = EventDetail.[12].[\"#text\"], dst_is_ipv6 = EventDetail.[13].[\"#text\"],  \ndst_ip = EventDetail.[14].[\"#text\"], dst_host_name = EventDetail.[15].[\"#text\"], dst_port = EventDetail.[16].[\"#text\"], dst_port_name = EventDetail.[17].[\"#text\"] \n| parse rule_name with * 'technique_id=' technique_id ',' * 'technique_name=' technique_name ',' * 'phase_name=' phase_name   \n| project-away EventDetail, rule_name \n; \nprocessEvents; \n}; \nlet SysmonEvent4_ServiceStateChange=() { \nlet processEvents = EventData \n| where EventID == 4 \n| extend event_creation_time = EventDetail.[0].[\"#text\"], service_state = EventDetail.[1].[\"#text\"], sysmon_schema = EventDetail.[2].[\"#text\"], sysmon_schema_version = EventDetail.[3].[\"#text\"] \n| project-away EventDetail \n; \nprocessEvents; \n}; \nlet SysmonEvent5_ProcessTerminate=() { \nlet processEvents = EventData \n| where EventID == 5 \n| extend rule_name = EventDetail.[0].[\"#text\"], event_creation_time = EventDetail.[1].[\"#text\"], process_guid = EventDetail.[2].[\"#text\"], process_id = EventDetail.[3].[\"#text\"], process_path = EventDetail.[4].[\"#text\"] \n| parse rule_name with * 'technique_id=' technique_id ',' * 'technique_name=' technique_name ',' * 'phase_name=' phase_name \n| project-away EventDetail, rule_name \n; \nprocessEvents; \n}; \nlet SysmonEvent6_DriverLoad=() { \nlet processEvents = EventData \n| where EventID == 6 \n| extend rule_name = EventDetail.[0].[\"#text\"], event_creation_time = EventDetail.[1].[\"#text\"], process_pathLoaded = EventDetail.[2].[\"#text\"], Hashes = EventDetail.[3].[\"#text\"], \ndriver_is_signed = EventDetail.[4].[\"#text\"], driver_signature = EventDetail.[5].[\"#text\"], driver_signature_status = EventDetail.[6].[\"#text\"] \n| parse rule_name with * 'technique_id=' technique_id ',' * 'technique_name=' technique_name ',' * 'phase_name=' phase_name \n| parse Hashes with * 'SHA1=' hash_sha1 ',' * 'MD5=' hash_md5 ',' * 'SHA256=' hash_sha256 ',' * 'IMPHASH=' hash_imphash \n| project-away EventDetail, rule_name \n; \nprocessEvents; \n}; \nlet SysmonEvent7_ImageLoad=() { \nlet processEvents = EventData \n| where EventID == 7 \n| extend rule_name = EventDetail.[0].[\"#text\"], event_creation_time = EventDetail.[1].[\"#text\"], process_guid = EventDetail.[2].[\"#text\"], process_id = EventDetail.[3].[\"#text\"], process_path = EventDetail.[4].[\"#text\"], \nmodule_loaded = EventDetail.[5].[\"#text\"], file_version = EventDetail.[6].[\"#text\"],file_description = EventDetail.[7].[\"#text\"], file_product = EventDetail.[8].[\"#text\"], file_company = EventDetail.[9].[\"#text\"], \nHashes = EventDetail.[11].[\"#text\"], module_is_signed = EventDetail.[12].[\"#text\"], module_signature = EventDetail.[13].[\"#text\"], module_signature_status = EventDetail.[14].[\"#text\"] \n| parse rule_name with * 'technique_id=' technique_id ',' * 'technique_name=' technique_name ',' * 'phase_name=' phase_name \n| parse Hashes with * 'SHA1=' hash_sha1 ',' * 'MD5=' hash_md5 ',' * 'SHA256=' hash_sha256 ',' * 'IMPHASH=' hash_imphash \n| project-away EventDetail, rule_name \n; \nprocessEvents; \n}; \nlet SysmonEvent8_CreateRemoteThread=() { \nlet processEvents = EventData \n| where EventID == 8 \n| extend rule_name = EventDetail.[0].[\"#text\"], event_creation_time = EventDetail.[1].[\"#text\"], process_guid = EventDetail.[2].[\"#text\"], process_id = EventDetail.[3].[\"#text\"], \nprocess_path = EventDetail.[4].[\"#text\"], target_process_guid = EventDetail.[5].[\"#text\"], target_process_id = EventDetail.[6].[\"#text\"], target_process_path = EventDetail.[7].[\"#text\"], \nthread_new_id = EventDetail.[8].[\"#text\"], thread_start_address = EventDetail.[9].[\"#text\"], thread_start_module = EventDetail.[10].[\"#text\"], thread_start_function = EventDetail.[11].[\"#text\"] \n| parse rule_name with * 'technique_id=' technique_id ',' * 'technique_name=' technique_name ',' * 'phase_name=' phase_name \n| project-away EventDetail, rule_name \n; \nprocessEvents; \n}; \nlet SysmonEvent9_RawAccessRead=() { \nlet processEvents = EventData \n| where EventID == 9 \n| extend rule_name = EventDetail.[0].[\"#text\"], event_creation_time = EventDetail.[1].[\"#text\"], process_guid = EventDetail.[2].[\"#text\"], process_id = EventDetail.[3].[\"#text\"], process_path = EventDetail.[4].[\"#text\"], target_device = EventDetail.[5].[\"#text\"] \n| parse rule_name with * 'technique_id=' technique_id ',' * 'technique_name=' technique_name ',' * 'phase_name=' phase_name \n| project-away EventDetail, rule_name \n; \nprocessEvents; \n}; \nlet SysmonEvent10_ProcessAccess=() { \nlet processEvents = EventData \n| where EventID == 10 \n| extend rule_name = EventDetail.[0].[\"#text\"],UtcTime = EventDetail.[1].[\"#text\"], process_guid = EventDetail.[2].[\"#text\"], process_id = EventDetail.[3].[\"#text\"], \nthread_id = EventDetail.[4].[\"#text\"],process_path = EventDetail.[5].[\"#text\"], target_process_guid = EventDetail.[6].[\"#text\"], target_process_id = EventDetail.[7].[\"#text\"], \ntarget_process_path = EventDetail.[8].[\"#text\"],process_granted_access = EventDetail.[9].[\"#text\"], process_call_trace = EventDetail.[10].[\"#text\"] \n| parse rule_name with * 'technique_id=' technique_id ',' * 'technique_name=' technique_name ',' * 'phase_name=' phase_name \n| project-away EventDetail, rule_name \n; \nprocessEvents; \n}; \nlet SysmonEvent11_FileCreate=() { \nlet processEvents = EventData \n| where EventID == 11 \n| extend rule_name = EventDetail.[0].[\"#text\"], event_creation_time = EventDetail.[1].[\"#text\"], process_guid = EventDetail.[2].[\"#text\"], process_id = EventDetail.[3].[\"#text\"], \nprocess_path = EventDetail.[4].[\"#text\"], file_name = EventDetail.[5].[\"#text\"], file_creation_time = EventDetail.[6].[\"#text\"] \n| parse rule_name with * 'technique_id=' technique_id ',' * 'technique_name=' technique_name ',' * 'phase_name=' phase_name \n| project-away EventDetail, rule_name \n; \nprocessEvents; \n}; \nlet SysmonEvent12_RegistryObjectAddDel=() { \nlet processEvents = EventData \n| where EventID == 12 \n| extend rule_name = EventDetail.[0].[\"#text\"], EventType = EventDetail.[1].[\"#text\"], event_creation_time = EventDetail.[2].[\"#text\"], process_guid = EventDetail.[3].[\"#text\"], \nprocess_id = EventDetail.[4].[\"#text\"],process_path = EventDetail.[5].[\"#text\"],registry_key_path = EventDetail.[6].[\"#text\"] \n| parse rule_name with * 'technique_id=' technique_id ',' * 'technique_name=' technique_name ',' * 'phase_name=' phase_name \n| project-away EventDetail, rule_name \n; \nprocessEvents; \n}; \nlet SysmonEvent13_RegistrySetValue=() { \nlet processEvents = EventData \n| where EventID == 13 \n| extend rule_name = EventDetail.[0].[\"#text\"], EventType = EventDetail.[1].[\"#text\"], event_creation_time = EventDetail.[2].[\"#text\"], process_guid = EventDetail.[3].[\"#text\"], \nprocess_id = EventDetail.[4].[\"#text\"],process_path = EventDetail.[5].[\"#text\"],registry_key_path = EventDetail.[6].[\"#text\"],registry_key_details = EventDetail.[7].[\"#text\"] \n| parse rule_name with * 'technique_id=' technique_id ',' * 'technique_name=' technique_name ',' * 'phase_name=' phase_name \n| project-away EventDetail, rule_name \n; \nprocessEvents; \n}; \nlet SysmonEvent14_RegistryObjectRename=() { \nlet processEvents = EventData \n| where EventID == 14 \n| extend rule_name = EventDetail.[0].[\"#text\"], EventType = EventDetail.[1].[\"#text\"], event_creation_time = EventDetail.[2].[\"#text\"], process_guid = EventDetail.[3].[\"#text\"], \nprocess_id = EventDetail.[4].[\"#text\"],process_path = EventDetail.[5].[\"#text\"],registry_key_path = EventDetail.[6].[\"#text\"],registry_key_new_name = EventDetail.[7].[\"#text\"] \n| parse rule_name with * 'technique_id=' technique_id ',' * 'technique_name=' technique_name ',' * 'phase_name=' phase_name \n| project-away EventDetail, rule_name \n; \nprocessEvents; \n}; \nlet SysmonEvent15_FileCreateStreamHash=() { \nlet processEvents = EventData \n| where EventID == 15 \n| extend rule_name = EventDetail.[0].[\"#text\"], event_creation_time = EventDetail.[1].[\"#text\"], process_guid = EventDetail.[2].[\"#text\"], process_id = EventDetail.[3].[\"#text\"], \nprocess_path = EventDetail.[4].[\"#text\"],file_name = EventDetail.[5].[\"#text\"],file_creation_time = EventDetail.[6].[\"#text\"],hash = EventDetail.[7].[\"#text\"] \n| parse rule_name with * 'technique_id=' technique_id ',' * 'technique_name=' technique_name ',' * 'phase_name=' phase_name \n| project-away EventDetail, rule_name \n; \nprocessEvents; \n}; \nlet SysmonEvent16_ConfigChange=() { \nlet processEvents = EventData \n| where EventID == 16 \n| extend event_creation_time = EventDetail.[0].[\"#text\"], sysmon_configuration = EventDetail.[1].[\"#text\"], sysmon_configuration_hash = EventDetail.[2].[\"#text\"] \n| project-away EventDetail \n; \nprocessEvents; \n}; \nlet SysmonEvent17_CreateNamedPipe=() { \nlet processEvents = EventData \n| where EventID == 17 \n| extend rule_name = EventDetail.[0].[\"#text\"], event_creation_time = EventDetail.[2].[\"#text\"], process_guid = EventDetail.[3].[\"#text\"], process_id = EventDetail.[4].[\"#text\"], pipe_name = EventDetail.[5].[\"#text\"], \nprocess_path = EventDetail.[6].[\"#text\"] \n| parse rule_name with * 'technique_id=' technique_id ',' * 'technique_name=' technique_name ',' * 'phase_name=' phase_name \n| project-away EventDetail, rule_name \n; \nprocessEvents; \n}; \nlet SysmonEvent18_ConnectNamedPipe=() { \nlet processEvents = EventData \n| where EventID == 18 \n| extend rule_name = EventDetail.[0].[\"#text\"], event_creation_time = EventDetail.[2].[\"#text\"], process_guid = EventDetail.[3].[\"#text\"], process_id = EventDetail.[4].[\"#text\"], pipe_name = EventDetail.[5].[\"#text\"], \nprocess_path = EventDetail.[6].[\"#text\"] \n| parse rule_name with * 'technique_id=' technique_id ',' * 'technique_name=' technique_name ',' * 'phase_name=' phase_name \n| project-away EventDetail, rule_name \n; \nprocessEvents; \n}; \nlet SysmonEvent19_WMIEventFilter=() { \nlet processEvents = EventData \n| where EventID == 19 \n| extend rule_name = EventDetail.[0].[\"#text\"], EventType = EventDetail.[1].[\"#text\"], event_creation_time = EventDetail.[2].[\"#text\"], wmi_operation = EventDetail.[3].[\"#text\"], \nuser_name = EventDetail.[4].[\"#text\"],wmi_namespace = EventDetail.[5].[\"#text\"],wmi_filter_name = EventDetail.[6].[\"#text\"],wmi_query = EventDetail.[7].[\"#text\"] \n| parse rule_name with * 'technique_id=' technique_id ',' * 'technique_name=' technique_name ',' * 'phase_name=' phase_name \n| project-away EventDetail, rule_name \n; \nprocessEvents; \n}; \nlet SysmonEvent20_WMIEventConsumer=() { \nlet processEvents = EventData \n| where EventID == 20 \n| extend rule_name = EventDetail.[0].[\"#text\"], EventType = EventDetail.[1].[\"#text\"], event_creation_time = EventDetail.[2].[\"#text\"], wmi_operation = EventDetail.[3].[\"#text\"], \nuser_name = EventDetail.[4].[\"#text\"],wmi_consumer_name = EventDetail.[5].[\"#text\"],wmi_consumer_type = EventDetail.[6].[\"#text\"],wmi_consumer_destination = EventDetail.[7].[\"#text\"] \n| parse rule_name with * 'technique_id=' technique_id ',' * 'technique_name=' technique_name ',' * 'phase_name=' phase_name \n| project-away EventDetail, rule_name \n; \nprocessEvents; \n}; \nlet SysmonEvent21_WMIEventConsumerToFilter=() { \nlet processEvents = EventData \n| where EventID == 21 \n| extend rule_name = EventDetail.[0].[\"#text\"], EventType = EventDetail.[1].[\"#text\"], event_creation_time = EventDetail.[2].[\"#text\"], wmi_operation = EventDetail.[3].[\"#text\"], \nuser_name = EventDetail.[4].[\"#text\"],wmi_consumer_path = EventDetail.[5].[\"#text\"],Type = EventDetail.[6].[\"#text\"],wmi_filter_path = EventDetail.[7].[\"#text\"] \n| parse rule_name with * 'technique_id=' technique_id ',' * 'technique_name=' technique_name ',' * 'phase_name=' phase_name \n| project-away EventDetail, rule_name \n; \nprocessEvents; \n}; \nlet SysmonEvent22_DNSEvents=() { \nlet processEvents = EventData \n| where EventID == 22 \n| extend rule_name = EventDetail.[0].[\"#text\"], event_creation_time = EventDetail.[1].[\"#text\"], process_guid = EventDetail.[2].[\"#text\"], process_id = EventDetail.[3].[\"#text\"], dns_query_name = EventDetail.[4].[\"#text\"],dns_query_status = EventDetail.[5].[\"#text\"],dns_query_results = EventDetail.[6].[\"#text\"],process_path = EventDetail.[7].[\"#text\"] \n| parse rule_name with * 'technique_id=' technique_id ',' * 'technique_name=' technique_name ',' * 'phase_name=' phase_name \n| project-away EventDetail, rule_name \n; \nprocessEvents; \n}; \nlet SysmonEvent23_FileDeleteArchived=() { \nlet processEvents = EventData \n| where EventID == 23 \n| extend rule_name = EventDetail.[0].[\"#text\"], event_creation_time = EventDetail.[1].[\"#text\"], process_guid = EventDetail.[2].[\"#text\"], process_id = EventDetail.[3].[\"#text\"], user_name = EventDetail.[4].[\"#text\"],process_path = EventDetail.[5].[\"#text\"],target_filename = EventDetail.[6].[\"#text\"],file_hashes = EventDetail.[7].[\"#text\"],is_executable = EventDetail.[8].[\"#text\"],is_archived = EventDetail.[9].[\"#text\"] \n| parse rule_name with * 'technique_id=' technique_id ',' * 'technique_name=' technique_name ',' * 'phase_name=' phase_name \n| project-away EventDetail, rule_name \n; \nprocessEvents; \n}; \nlet SysmonEvent24_ClipboardChange=() { \nlet processEvents = EventData \n| where EventID == 24 \n| extend rule_name = EventDetail.[0].[\"#text\"], event_creation_time = EventDetail.[1].[\"#text\"], process_guid = EventDetail.[2].[\"#text\"], process_id = EventDetail.[3].[\"#text\"], process_path = EventDetail.[4].[\"#text\"], session = EventDetail.[5].[\"#text\"], client_info = EventDetail.[6].[\"#text\"], hashes = EventDetail.[7].[\"#text\"], is_archived = EventDetail.[8].[\"#text\"] \n| parse rule_name with * 'technique_id=' technique_id ',' * 'technique_name=' technique_name ',' * 'phase_name=' phase_name \n| project-away EventDetail, rule_name \n; \nprocessEvents; \n}; \nlet SysmonEvent25_ProcessTampering=() { \nlet processEvents = EventData \n| where EventID == 25 \n| extend rule_name = EventDetail.[0].[\"#text\"], event_creation_time = EventDetail.[1].[\"#text\"], process_guid = EventDetail.[2].[\"#text\"], process_id = EventDetail.[3].[\"#text\"], process_path = EventDetail.[4].[\"#text\"], type = EventDetail.[5].[\"#text\"] \n| parse rule_name with * 'technique_id=' technique_id ',' * 'technique_name=' technique_name ',' * 'phase_name=' phase_name \n| project-away EventDetail, rule_name \n; \nprocessEvents; \n}; \nlet SysmonEvent26_FileDeleteLogged=() { \nlet processEvents = EventData \n| where EventID == 26 \n| extend rule_name = EventDetail.[0].[\"#text\"], event_creation_time = EventDetail.[1].[\"#text\"], process_guid = EventDetail.[2].[\"#text\"], process_id = EventDetail.[3].[\"#text\"], user_name = EventDetail.[4].[\"#text\"],process_path = EventDetail.[5].[\"#text\"],target_filename = EventDetail.[6].[\"#text\"],file_hashes = EventDetail.[7].[\"#text\"], is_executable = EventDetail.[8].[\"#text\"] \n| parse rule_name with * 'technique_id=' technique_id ',' * 'technique_name=' technique_name ',' * 'phase_name=' phase_name \n| project-away EventDetail, rule_name \n; \nprocessEvents; \n}; \nlet SysmonEvent27_FileBlockExecutable=() { \nlet processEvents = EventData \n| where EventID == 27 \n| extend rule_name = EventDetail.[0].[\"#text\"], event_creation_time = EventDetail.[1].[\"#text\"], process_guid = EventDetail.[2].[\"#text\"], process_id = EventDetail.[3].[\"#text\"], user_name = EventDetail.[4].[\"#text\"],process_path = EventDetail.[5].[\"#text\"],target_filename = EventDetail.[6].[\"#text\"],file_hashes = EventDetail.[7].[\"#text\"] \n| parse rule_name with * 'technique_id=' technique_id ',' * 'technique_name=' technique_name ',' * 'phase_name=' phase_name \n| project-away EventDetail, rule_name \n; \nprocessEvents; \n}; \nlet SysmonEvent28_FileBlockShredding=() { \nlet processEvents = EventData \n| where EventID == 28 \n| extend rule_name = EventDetail.[0].[\"#text\"], event_creation_time = EventDetail.[1].[\"#text\"], process_guid = EventDetail.[2].[\"#text\"], process_id = EventDetail.[3].[\"#text\"], user_name = EventDetail.[4].[\"#text\"],process_path = EventDetail.[5].[\"#text\"],target_filename = EventDetail.[6].[\"#text\"],file_hashes = EventDetail.[7].[\"#text\"], is_executable = EventDetail.[8].[\"#text\"] \n| parse rule_name with * 'technique_id=' technique_id ',' * 'technique_name=' technique_name ',' * 'phase_name=' phase_name \n| project-away EventDetail, rule_name \n; \nprocessEvents; \n}; \n(union isfuzzy=true \nSysmonEvent1_ProcessCreate,SysmonEvent2_FileCreateTime,SysmonEvent3_NetworkConnect,SysmonEvent4_ServiceStateChange,SysmonEvent5_ProcessTerminate, \nSysmonEvent6_DriverLoad,SysmonEvent7_ImageLoad,SysmonEvent8_CreateRemoteThread,SysmonEvent9_RawAccessRead,SysmonEvent10_ProcessAccess, \nSysmonEvent11_FileCreate,SysmonEvent12_RegistryObjectAddDel,SysmonEvent13_RegistrySetValue,SysmonEvent14_RegistryObjectRename, \nSysmonEvent15_FileCreateStreamHash,SysmonEvent16_ConfigChange,SysmonEvent17_CreateNamedPipe,SysmonEvent18_ConnectNamedPipe, \nSysmonEvent19_WMIEventFilter,SysmonEvent20_WMIEventConsumer,SysmonEvent21_WMIEventConsumerToFilter,SysmonEvent22_DNSEvents,SysmonEvent23_FileDeleteArchived,SysmonEvent24_ClipboardChange,SysmonEvent25_ProcessTampering,SysmonEvent26_FileDeleteLogged,SysmonEvent27_FileBlockExecutable,SysmonEvent28_FileBlockShredding)",
        "version": 1,
        "functionParameters": "starttime:datetime=datetime(null),endtime:datetime=datetime(null),eventtype_in:dynamic=dynamic([]),srcipaddr_has_any_prefix:dynamic=dynamic([]),actorusername_has_any:dynamic=dynamic([]),targetfilepath_has_any:dynamic=dynamic([]),srcfilepath_has_any:dynamic=dynamic([]),hashes_has_any:dynamic=dynamic([]),dvchostname_has_any:dynamic=dynamic([]),disabled:bool=False"
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/savedSearches",
      "apiVersion": "2020-08-01",
      "name": "[concat(variables('uniqueWorkspace'), '/SysmonParserNew')]",
       "location": "[parameters('location')]",
       "dependsOn": [
        "[resourceId('Microsoft.OperationalInsights/workspaces/', variables('uniqueWorkspace'))]"
      ],
      "properties": {
        "etag": "*",
        "displayName": "SysmonParserNew",
        "category": "Sysmon",
        "FunctionAlias": "SysmonParserNew",
        "query": "// KQL Sysmon Event Parser\r\n// Last Updated Date: October 19, 2022\r\n// Sysmon Version: Applicable to all versions\r\n//\r\n// Sysmon Instructions:\r\n// If you want to print configuration schema definition of sysmon. Execute below command from command shell or powershell terminal\r\n// Sysmon.exe -s\r\n//\r\n// You can further customize config XML definition and install sysmon with it via below command. \r\n// Sample Sysmon config XML from Swift on Security's GitHub page : https://github.com/SwiftOnSecurity/sysmon-config/blob/master/sysmonconfig-export.xml\r\n// Sysmon.exe -i sysmonconfig-export.xml -accepteula -h sha1,md5,sha256 -n -l  \r\n// -n : Log all network connections and -l: log loading of modules.\r\n//\r\n// Parser Notes:\r\n// This parser works against all versions unless original event manifest is changed\r\n// \r\n//\r\n// Usage Instruction : \r\n// Paste below query in log analytics, click on Save button and select as Function from drop down by specifying function name and alias (e.g. Sysmon_Normalized).\r\n// Function usually takes 10-15 minutes to activate. You can then use function alias from any other queries (e.g. Sysmon_Normalized | take 10).\r\n// Reference :\r\n// Using functions in Azure monitor log queries : https://docs.microsoft.com/azure/azure-monitor/log-query/functions\r\n// Tech Community Blog on KQL Functions : https://techcommunity.microsoft.com/t5/Azure-Sentinel/Using-KQL-functions-to-speed-up-analysis-in-Azure-Sentinel/ba-p/712381\r\n//\r\nEvent\r\n| where Source == \"Microsoft-Windows-Sysmon\"\r\n| extend RenderedDescription = tostring(split(RenderedDescription, \":\")[0])\r\n| extend EventData = parse_xml(EventData).DataItem.EventData.Data\r\n| mv-expand bagexpansion=array EventData\r\n| evaluate bag_unpack(EventData)\r\n| extend Key = tostring(column_ifexists('@Name', \"\")), Value = tostring(column_ifexists('#text', \"\"))\r\n| evaluate pivot(Key, any(Value), TimeGenerated, Source, EventLog, Computer, EventLevel, EventLevelName, EventID, UserName, RenderedDescription, MG, ManagementGroupName, _ResourceId)\r\n| extend TimeGenerated = column_ifexists(\"TimeGenerated\", \"\"), Source = column_ifexists(\"Source\", \"\"), EventLog = column_ifexists(\"EventLog\", \"\"), Computer = column_ifexists(\"Computer\", \"\"), EventLevel = column_ifexists(\"EventLevel\", \"\"), EventLevelName = column_ifexists(\"EventLevelName\", \"\"), EventID = column_ifexists(\"EventID\", \"\"), UserName = column_ifexists(\"UserName\", \"\"), RenderedDescription = column_ifexists(\"RenderedDescription\", \"\"), MG = column_ifexists(\"MG\", \"\"), ManagementGroupName = column_ifexists(\"ManagementGroupName\", \"\"), _ResourceId = column_ifexists(\"_ResourceId\", \"\"), UtcTime = column_ifexists(\"UtcTime\", \"\"), ID = column_ifexists(\"ID\", \"\"), Description = column_ifexists(\"Description\", \"\"), RuleName = column_ifexists(\"RuleName\", \"\"), ProcessGuid = column_ifexists(\"ProcessGuid\", \"\"), ProcessId = column_ifexists(\"ProcessId\", \"\"), Image = column_ifexists(\"Image\", \"\"), FileVersion = column_ifexists(\"FileVersion\", \"\"), Product = column_ifexists(\"Product\", \"\"), Company = column_ifexists(\"Company\", \"\"), OriginalFileName = column_ifexists(\"OriginalFileName\", \"\"), CommandLine = column_ifexists(\"CommandLine\", \"\"), CurrentDirectory = column_ifexists(\"CurrentDirectory\", \"\"), User = column_ifexists(\"User\", \"\"), LogonGuid = column_ifexists(\"LogonGuid\", \"\"), LogonId = column_ifexists(\"LogonId\", \"\"), TerminalSessionId = column_ifexists(\"TerminalSessionId\", \"\"), IntegrityLevel = column_ifexists(\"IntegrityLevel\", \"\"), Hashes = column_ifexists(\"Hashes\", \"\"), ParentProcessGuid = column_ifexists(\"ParentProcessGuid\", \"\"), ParentProcessId = column_ifexists(\"ParentProcessId\", \"\"), ParentImage = column_ifexists(\"ParentImage\", \"\"), ParentCommandLine = column_ifexists(\"ParentCommandLine\", \"\"), ParentUser = column_ifexists(\"ParentUser\", \"\"), TargetFilename = column_ifexists(\"TargetFilename\", \"\"), CreationUtcTime = column_ifexists(\"CreationUtcTime\", \"\"), PreviousCreationUtcTime = column_ifexists(\"PreviousCreationUtcTime\", \"\"), Protocol = column_ifexists(\"Protocol\", \"\"), Initiated = column_ifexists(\"Initiated\", \"\"), SourceIsIpv6 = column_ifexists(\"SourceIsIpv6\", \"\"), SourceIp = column_ifexists(\"SourceIp\", \"\"), SourceHostname = column_ifexists(\"SourceHostname\", \"\"), SourcePort = column_ifexists(\"SourcePort\", \"\"), SourcePortName = column_ifexists(\"SourcePortName\", \"\"), DestinationIsIpv6 = column_ifexists(\"DestinationIsIpv6\", \"\"), DestinationIp = column_ifexists(\"DestinationIp\", \"\"), DestinationHostname = column_ifexists(\"DestinationHostname\", \"\"), DestinationPort = column_ifexists(\"DestinationPort\", \"\"), DestinationPortName = column_ifexists(\"DestinationPortName\", \"\"), State = column_ifexists(\"State\", \"\"), Version = column_ifexists(\"Version\", \"\"), SchemaVersion = column_ifexists(\"SchemaVersion\", \"\"), ImageLoaded = column_ifexists(\"ImageLoaded\", \"\"), Signed = column_ifexists(\"Signed\", \"\"), Signature = column_ifexists(\"Signature\", \"\"), SignatureStatus = column_ifexists(\"SignatureStatus\", \"\"), SourceProcessGuid = column_ifexists(\"SourceProcessGuid\", \"\"), SourceProcessId = column_ifexists(\"SourceProcessId\", \"\"), SourceImage = column_ifexists(\"SourceImage\", \"\"), TargetProcessGuid = column_ifexists(\"TargetProcessGuid\", \"\"), TargetProcessId = column_ifexists(\"TargetProcessId\", \"\"), TargetImage = column_ifexists(\"TargetImage\", \"\"), NewThreadId = column_ifexists(\"NewThreadId\", \"\"), StartAddress = column_ifexists(\"StartAddress\", \"\"), StartModule = column_ifexists(\"StartModule\", \"\"), StartFunction = column_ifexists(\"StartFunction\", \"\"), SourceUser = column_ifexists(\"SourceUser\", \"\"), TargetUser = column_ifexists(\"TargetUser\", \"\"), Device = column_ifexists(\"Device\", \"\"), SourceProcessGUID = column_ifexists(\"SourceProcessGUID\", \"\"), SourceThreadId = column_ifexists(\"SourceThreadId\", \"\"), TargetProcessGUID = column_ifexists(\"TargetProcessGUID\", \"\"), GrantedAccess = column_ifexists(\"GrantedAccess\", \"\"), CallTrace = column_ifexists(\"CallTrace\", \"\"), EventType = column_ifexists(\"EventType\", \"\"), TargetObject = column_ifexists(\"TargetObject\", \"\"), Details = column_ifexists(\"Details\", \"\"), NewName = column_ifexists(\"NewName\", \"\"), Hash = column_ifexists(\"Hash\", \"\"), Contents = column_ifexists(\"Contents\", \"\"), Configuration = column_ifexists(\"Configuration\", \"\"), ConfigurationFileHash = column_ifexists(\"ConfigurationFileHash\", \"\"), PipeName = column_ifexists(\"PipeName\", \"\"), Operation = column_ifexists(\"Operation\", \"\"), EventNamespace = column_ifexists(\"EventNamespace\", \"\"), Name = column_ifexists(\"Name\", \"\"), Query = column_ifexists(\"Query\", \"\"), Type = column_ifexists(\"Type\", \"\"), Destination = column_ifexists(\"Destination\", \"\"), Consumer = column_ifexists(\"Consumer\", \"\"), Filter = column_ifexists(\"Filter\", \"\"), QueryName = column_ifexists(\"QueryName\", \"\"), QueryStatus = column_ifexists(\"QueryStatus\", \"\"), QueryResults = column_ifexists(\"QueryResults\", \"\"), IsExecutable = column_ifexists(\"IsExecutable\", \"\"), Archived = column_ifexists(\"Archived\", \"\"), Session = column_ifexists(\"Session\", \"\"), ClientInfo = column_ifexists(\"ClientInfo\", \"\")\r\n// Fix for wrong casing in EventID10\r\n| extend SourceProcessGuid=iff(isnotempty(SourceProcessGUID),SourceProcessGUID,SourceProcessGuid), TargetProcessGuid=iff(isnotempty(TargetProcessGUID),TargetProcessGUID,TargetProcessGuid)\r\n| project-away SourceProcessGUID, TargetProcessGUID  \r\n// end fix\r\n| parse RuleName with * 'technique_id=' TechniqueId ',' * 'technique_name=' TechniqueName\r\n| parse Hashes with * 'SHA1=' SHA1 ',' * 'MD5=' MD5 ',' * 'SHA256=' SHA256 ',' * 'IMPHASH=' IMPHASH",
        "version": 1,
        "functionParameters": "starttime:datetime=datetime(null),endtime:datetime=datetime(null),eventtype_in:dynamic=dynamic([]),srcipaddr_has_any_prefix:dynamic=dynamic([]),actorusername_has_any:dynamic=dynamic([]),targetfilepath_has_any:dynamic=dynamic([]),srcfilepath_has_any:dynamic=dynamic([]),hashes_has_any:dynamic=dynamic([]),dvchostname_has_any:dynamic=dynamic([]),disabled:bool=False"
      }
    }
  ],
  "outputs": {
    "workspaceName": {
      "type": "string",
      "value": "[variables('uniqueWorkspace')]"
    },
    "workspaceIdOutput": {
      "type": "string",
      "value": "[reference(resourceId('Microsoft.OperationalInsights/workspaces/', variables('uniqueWorkspace')), '2015-11-01-preview').customerId]"
    },
    "workspaceKeyOutput": {
      "type": "string",
      "value": "[listKeys(resourceId('Microsoft.OperationalInsights/workspaces/', variables('uniqueWorkspace')), '2015-11-01-preview').primarySharedKey]"
    },
    "workspaceResourceIdOutput": {
      "type": "string",
      "value": "[resourceId('Microsoft.OperationalInsights/workspaces/', variables('uniqueWorkspace'))]"
    }
  }
}