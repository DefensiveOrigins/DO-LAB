{
  "$schema": "https://schema.management.azure.com/schemas/2019-08-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "Workspace": {
      "type": "string",
      "metadata": {
        "description": "The Microsoft Sentinel workspace into which the function will be deployed. Has to be in the selected Resource Group."
      }
    },
    "WorkspaceRegion": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "The region of the selected workspace. The default value will use the Region selection above."
      }
    }
  },
  "resources": [
    {
      "type": "Microsoft.OperationalInsights/workspaces/savedSearches",
      "apiVersion": "2020-08-01",
      "name": "[concat(parameters('Workspace'), '/SysmonParser3')]",
      "location": "[parameters('WorkspaceRegion')]",
      "properties": {
        "etag": "*",
        "displayName": "SysmonParser3",
        "category": "Sysmon",
        "FunctionAlias": "SysmonParser3",
        "query": "// KQL Sysmon Event Parser\r\n// Last Updated Date: October 19, 2022\r\n// Sysmon Version: Applicable to all versions\r\n//\r\n// Sysmon Instructions:\r\n// If you want to print configuration schema definition of sysmon. Execute below command from command shell or powershell terminal\r\n// Sysmon.exe -s\r\n//\r\n// You can further customize config XML definition and install sysmon with it via below command. \r\n// Sample Sysmon config XML from Swift on Security's GitHub page : https://github.com/SwiftOnSecurity/sysmon-config/blob/master/sysmonconfig-export.xml\r\n// Sysmon.exe -i sysmonconfig-export.xml -accepteula -h sha1,md5,sha256 -n -l  \r\n// -n : Log all network connections and -l: log loading of modules.\r\n//\r\n// Parser Notes:\r\n// This parser works against all versions unless original event manifest is changed\r\n// \r\n//\r\n// Usage Instruction : \r\n// Paste below query in log analytics, click on Save button and select as Function from drop down by specifying function name and alias (e.g. Sysmon_Normalized).\r\n// Function usually takes 10-15 minutes to activate. You can then use function alias from any other queries (e.g. Sysmon_Normalized | take 10).\r\n// Reference :\r\n// Using functions in Azure monitor log queries : https://docs.microsoft.com/azure/azure-monitor/log-query/functions\r\n// Tech Community Blog on KQL Functions : https://techcommunity.microsoft.com/t5/Azure-Sentinel/Using-KQL-functions-to-speed-up-analysis-in-Azure-Sentinel/ba-p/712381\r\n//\r\nEvent\r\n| where Source == \"Microsoft-Windows-Sysmon\"\r\n| extend RenderedDescription = tostring(split(RenderedDescription, \":\")[0])\r\n| extend EventData = parse_xml(EventData).DataItem.EventData.Data\r\n| mv-expand bagexpansion=array EventData\r\n| evaluate bag_unpack(EventData)\r\n| extend Key = tostring(column_ifexists('@Name', \"\")), Value = tostring(column_ifexists('#text', \"\"))\r\n| evaluate pivot(Key, any(Value), TimeGenerated, Source, EventLog, Computer, EventLevel, EventLevelName, EventID, UserName, RenderedDescription, MG, ManagementGroupName, _ResourceId)\r\n| extend TimeGenerated = column_ifexists(\"TimeGenerated\", \"\"), Source = column_ifexists(\"Source\", \"\"), EventLog = column_ifexists(\"EventLog\", \"\"), Computer = column_ifexists(\"Computer\", \"\"), EventLevel = column_ifexists(\"EventLevel\", \"\"), EventLevelName = column_ifexists(\"EventLevelName\", \"\"), EventID = column_ifexists(\"EventID\", \"\"), UserName = column_ifexists(\"UserName\", \"\"), RenderedDescription = column_ifexists(\"RenderedDescription\", \"\"), MG = column_ifexists(\"MG\", \"\"), ManagementGroupName = column_ifexists(\"ManagementGroupName\", \"\"), _ResourceId = column_ifexists(\"_ResourceId\", \"\"), UtcTime = column_ifexists(\"UtcTime\", \"\"), ID = column_ifexists(\"ID\", \"\"), Description = column_ifexists(\"Description\", \"\"), RuleName = column_ifexists(\"RuleName\", \"\"), ProcessGuid = column_ifexists(\"ProcessGuid\", \"\"), ProcessId = column_ifexists(\"ProcessId\", \"\"), Image = column_ifexists(\"Image\", \"\"), FileVersion = column_ifexists(\"FileVersion\", \"\"), Product = column_ifexists(\"Product\", \"\"), Company = column_ifexists(\"Company\", \"\"), OriginalFileName = column_ifexists(\"OriginalFileName\", \"\"), CommandLine = column_ifexists(\"CommandLine\", \"\"), CurrentDirectory = column_ifexists(\"CurrentDirectory\", \"\"), User = column_ifexists(\"User\", \"\"), LogonGuid = column_ifexists(\"LogonGuid\", \"\"), LogonId = column_ifexists(\"LogonId\", \"\"), TerminalSessionId = column_ifexists(\"TerminalSessionId\", \"\"), IntegrityLevel = column_ifexists(\"IntegrityLevel\", \"\"), Hashes = column_ifexists(\"Hashes\", \"\"), ParentProcessGuid = column_ifexists(\"ParentProcessGuid\", \"\"), ParentProcessId = column_ifexists(\"ParentProcessId\", \"\"), ParentImage = column_ifexists(\"ParentImage\", \"\"), ParentCommandLine = column_ifexists(\"ParentCommandLine\", \"\"), ParentUser = column_ifexists(\"ParentUser\", \"\"), TargetFilename = column_ifexists(\"TargetFilename\", \"\"), CreationUtcTime = column_ifexists(\"CreationUtcTime\", \"\"), PreviousCreationUtcTime = column_ifexists(\"PreviousCreationUtcTime\", \"\"), Protocol = column_ifexists(\"Protocol\", \"\"), Initiated = column_ifexists(\"Initiated\", \"\"), SourceIsIpv6 = column_ifexists(\"SourceIsIpv6\", \"\"), SourceIp = column_ifexists(\"SourceIp\", \"\"), SourceHostname = column_ifexists(\"SourceHostname\", \"\"), SourcePort = column_ifexists(\"SourcePort\", \"\"), SourcePortName = column_ifexists(\"SourcePortName\", \"\"), DestinationIsIpv6 = column_ifexists(\"DestinationIsIpv6\", \"\"), DestinationIp = column_ifexists(\"DestinationIp\", \"\"), DestinationHostname = column_ifexists(\"DestinationHostname\", \"\"), DestinationPort = column_ifexists(\"DestinationPort\", \"\"), DestinationPortName = column_ifexists(\"DestinationPortName\", \"\"), State = column_ifexists(\"State\", \"\"), Version = column_ifexists(\"Version\", \"\"), SchemaVersion = column_ifexists(\"SchemaVersion\", \"\"), ImageLoaded = column_ifexists(\"ImageLoaded\", \"\"), Signed = column_ifexists(\"Signed\", \"\"), Signature = column_ifexists(\"Signature\", \"\"), SignatureStatus = column_ifexists(\"SignatureStatus\", \"\"), SourceProcessGuid = column_ifexists(\"SourceProcessGuid\", \"\"), SourceProcessId = column_ifexists(\"SourceProcessId\", \"\"), SourceImage = column_ifexists(\"SourceImage\", \"\"), TargetProcessGuid = column_ifexists(\"TargetProcessGuid\", \"\"), TargetProcessId = column_ifexists(\"TargetProcessId\", \"\"), TargetImage = column_ifexists(\"TargetImage\", \"\"), NewThreadId = column_ifexists(\"NewThreadId\", \"\"), StartAddress = column_ifexists(\"StartAddress\", \"\"), StartModule = column_ifexists(\"StartModule\", \"\"), StartFunction = column_ifexists(\"StartFunction\", \"\"), SourceUser = column_ifexists(\"SourceUser\", \"\"), TargetUser = column_ifexists(\"TargetUser\", \"\"), Device = column_ifexists(\"Device\", \"\"), SourceProcessGUID = column_ifexists(\"SourceProcessGUID\", \"\"), SourceThreadId = column_ifexists(\"SourceThreadId\", \"\"), TargetProcessGUID = column_ifexists(\"TargetProcessGUID\", \"\"), GrantedAccess = column_ifexists(\"GrantedAccess\", \"\"), CallTrace = column_ifexists(\"CallTrace\", \"\"), EventType = column_ifexists(\"EventType\", \"\"), TargetObject = column_ifexists(\"TargetObject\", \"\"), Details = column_ifexists(\"Details\", \"\"), NewName = column_ifexists(\"NewName\", \"\"), Hash = column_ifexists(\"Hash\", \"\"), Contents = column_ifexists(\"Contents\", \"\"), Configuration = column_ifexists(\"Configuration\", \"\"), ConfigurationFileHash = column_ifexists(\"ConfigurationFileHash\", \"\"), PipeName = column_ifexists(\"PipeName\", \"\"), Operation = column_ifexists(\"Operation\", \"\"), EventNamespace = column_ifexists(\"EventNamespace\", \"\"), Name = column_ifexists(\"Name\", \"\"), Query = column_ifexists(\"Query\", \"\"), Type = column_ifexists(\"Type\", \"\"), Destination = column_ifexists(\"Destination\", \"\"), Consumer = column_ifexists(\"Consumer\", \"\"), Filter = column_ifexists(\"Filter\", \"\"), QueryName = column_ifexists(\"QueryName\", \"\"), QueryStatus = column_ifexists(\"QueryStatus\", \"\"), QueryResults = column_ifexists(\"QueryResults\", \"\"), IsExecutable = column_ifexists(\"IsExecutable\", \"\"), Archived = column_ifexists(\"Archived\", \"\"), Session = column_ifexists(\"Session\", \"\"), ClientInfo = column_ifexists(\"ClientInfo\", \"\")\r\n// Fix for wrong casing in EventID10\r\n| extend SourceProcessGuid=iff(isnotempty(SourceProcessGUID),SourceProcessGUID,SourceProcessGuid), TargetProcessGuid=iff(isnotempty(TargetProcessGUID),TargetProcessGUID,TargetProcessGuid)\r\n| project-away SourceProcessGUID, TargetProcessGUID  \r\n// end fix\r\n| parse RuleName with * 'technique_id=' TechniqueId ',' * 'technique_name=' TechniqueName\r\n| parse Hashes with * 'SHA1=' SHA1 ',' * 'MD5=' MD5 ',' * 'SHA256=' SHA256 ',' * 'IMPHASH=' IMPHASH",
        "version": 1,
        "functionParameters": "starttime:datetime=datetime(null),endtime:datetime=datetime(null),eventtype_in:dynamic=dynamic([]),srcipaddr_has_any_prefix:dynamic=dynamic([]),actorusername_has_any:dynamic=dynamic([]),targetfilepath_has_any:dynamic=dynamic([]),srcfilepath_has_any:dynamic=dynamic([]),hashes_has_any:dynamic=dynamic([]),dvchostname_has_any:dynamic=dynamic([]),disabled:bool=False"
      }
    }
  ]
}